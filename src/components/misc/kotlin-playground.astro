---
import type { HTMLAttributes } from 'astro/types';

// No need for TypeScript type declarations for the Kotlin playground attributes
// We'll use JSX expressions with string literals for the attributes

export interface Props {
  code: string;
  to?: string;
  hideMain?: boolean;
}

const { code, to, hideMain = false } = Astro.props;

// Check if the code already has a main function
const hasMainFunction = code.includes("fun main(");

// If not, wrap the code in a main function
const processedCode = hasMainFunction ? code : `fun main() {
${code}
}`;

// Get the line count to set the "to" attribute if not provided
const lineCount = processedCode.split('\n').length;

// Find the main function line if hideMain is true
let mainFunctionLineNumber = -1;
if (hideMain && hasMainFunction) {
  const lines = processedCode.split('\n');
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].includes("fun main()") || lines[i].includes("fun main(")) {
      mainFunctionLineNumber = i - 3; // +1 because line numbers start at 1
      break;
    }
  }
}

// Use the provided "to" value if it exists, otherwise calculate it
let calculatedToValue;
if (hideMain && mainFunctionLineNumber > 0) {
  calculatedToValue = mainFunctionLineNumber.toString();
} else {
  calculatedToValue = hasMainFunction ? (lineCount - 3).toString() : (lineCount - 1).toString();
}
const toValue = to || calculatedToValue;
---

<div class="kotlin-playground-wrapper">
  <div class="kotlin-code" {...{ lines: "true", "auto-indent": "true", theme: "darcula", from: "2", to: toValue }}>
    {processedCode}
  </div>
</div>

<style>
  .kotlin-playground-wrapper {
    margin: 1.5rem 0;
  }
</style>
